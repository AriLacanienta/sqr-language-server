!*************************************************************************
! NAME: usax1096.sqr
!
! FUNCTION: Create file named �PS_to_Atrium_Person_Feed-date-time.csv� 
!           Data should be formatted exactly like it is currently for Blackboard.
!           It will need column headers, order, and name are completely up to us.
!
!
! PATH: U of U Applications > ID System > Process > Atrium Biodata File Creation
!        
!
! AUTHOR: University of Utah, ACS
!
! HISTORY:
!
! UU_MOD AX1096A 10/31/2019 Fresco, Ed - Original development
!
! UU_MOD AX1103 07/01/20 West, Mitch - Fix bad join on main select
!
! UU_MOD AX1104 07/13/2021 Lacanienta, Ari - Remove dependency on PS_UU_CLONE_ID_TBL
!
! UU_MOD AX1145 08/22/2022 Lacanienta, Ari - Added column 'ID EVENT PLAN 2'
!                          to distinguish betweeen hosp/campus benefitted employees
!                                               
!*************************************************************************

#include 'setenv.sqc'
#include 'setup01.sqc'

#define $RemoteUserID 'atrium'

!*************************************************************************
! BEGIN REPORT
!*************************************************************************
begin-report
    do stdapi-init
    do Init-DateTime
    do Init-Number
    do Get-Current-DateTime
    do Init-Report
    do Write-File-Header
    do Process-Main
    close 111
    show 'Event Plans updated: ' #event_plan_count              !UU_MOD AX1104
    show 'Records Written: ' #count
    show '$RemoteUserID = ' {$RemoteUserID}
    show '$LocalFileName = ' $LocalFileName
    show '$RemoteFileName = ' $RemoteFileName

    let $ps_home       = getenv('PS_HOME')
    let $file_datetime = ' '
    do get-file-date-time($today)
    do Get-Current-DateTime
    let $time_now = substr($AsOfNow,1,8) || substr($AsOfNow,16,3)
    let $time_now = translate($time_now,':','_')
    let $file_datetime = $today || '_' || $time_now 

    show '$file_datetime: ' $file_datetime

    let $archivefilename     = $ps_home || '/data/ucard/archive/' || 'uu_ps_ent_atrium_' || $file_datetime || '.csv'
    show '$archivefilename: '  $archivefilename
    do Archive-File($LocalFileName, $ArchiveFileName)

    let $RemoteUserID  = 'atrium'
    do AUX-Send-File-To-Transfer-Server($RemoteUserID, $LocalFileName, $RemoteFileName, #CommandResult)
    do reset
    do stdapi-term
end-report


!*************************************************************************
! INIT REPORT
!*************************************************************************
begin-procedure Init-Report

    let #count = 0

    let $appl_name = 'ucard'
    let $sub_appl_name = ' '
    let $function_name = 'out'

    let $user_specified_file = 'uu_ps_ent_atrium.csv'

    show '$User_Specified_File: '  $User_Specified_File
    show '$remote_user_file   : '  $archivefilename

    do Get-File-PathName                             !ushr_setenv.sqc
    show 'Filename: '  $FileName
    let $LocalFileName = $FileName

    open $FileName as 111 for-writing record=1200:vary 
    status=#FileStatus Encoding = UTF-8
    if #FileStatus <> 0
      show 'File uu_ps_ent_atrium.csv cannot be opened for writing'
      stop
    else
       Do Determine-Base($base)
       if $base = 'prod'
           let $RemoteFileName = 'incoming/UIT/PSEntFeed/' || $user_specified_file
       else
           let $RemoteFileName = $user_specified_file
       end-if
    end-if
    
end-procedure Init-Report


!*************************************************************************
! PROCESS MAIN
!*************************************************************************
begin-procedure Process-Main
#debuga show 'USAX1096-Process-Main'

!UU_MOD AX1104
do get-bio-info
do get-recent-inactive-bio-info
end-procedure Process-Main


!*******************************************************************************
! Procedure: get-bio-info
! Description: Selects bio info for the emplid pop
!              UU_MOD AX1104
!*******************************************************************************
begin-procedure get-bio-info
    let $first_name        = ' ' 
    let $middle_name       = ' '
    let $last_name         = ' '
    let $Email             = ' '
    let $id_event_plan     = ' '
    let $id_event_plan_2   = ' ' !UU_MOD AX1145
    let $id_classification = ' '
    let $home_dept         = 'None'
    let $work_phone        = ' '
	let $enrollment_status = 'N'

begin-SELECT  
POP.EMPLID             &emplid
A0.FIRST_NAME          &first_name_PRI
A0.MIDDLE_NAME         &middle_name_PRI
A0.LAST_NAME           &last_name_PRI
A1.NAME_TYPE           &PRF
A1.FIRST_NAME          &first_name_PRF
A1.MIDDLE_NAME         &middle_name_PRF
A1.LAST_NAME           &last_name_PRF
B0.EMAIL_ADDR          &email_UM
B1.E_ADDR_TYPE         &UU
B1.EMAIL_ADDR          &email_UU
C.UU_HOME_DEPT         &dept
D.UU_LDAP_STU_ADMIT    &stu-admit
D.UU_LDAP_STU_CURR     &stu-curr
D.UU_LDAP_EMPL_CURR    &empl-curr
D.UU_LDAP_EMPL_FAC     &empl-fac
E.UU_ID_EVENT_PLAN     &id_event_plan
E.UU_ID_CLASSIFICATN   &id_classification

    let $emplid = &emplid
    #debuga show ' '
    #debuga show 'USAX1096-get-bio-info(' $emplid ')'

    do get-event-plan-classification ($emplid, $id_event_plan, $id_classification) !aux-misc.sqc
    do get-event-plan-2 !UU_MOD AX1145
    do check-for-updates

    if ($id_event_plan <> 'NONE')
        if(&PRF = 'PRF')
            let $first_name  = &first_name_PRF
            let $middle_name = &middle_name_PRF
            let $last_name   = &last_name_PRF
        else
            let $first_name  = &first_name_PRI
            let $middle_name = &middle_name_PRI
            let $last_name   = &last_name_PRI
        end-if

        if(&email_UM = ' ' or &email_UM = '')
            let $email = &email_UU
        else
            let $email = &email_UM
        end-if

        let $id_event_plan      = &id_event_plan
        let $id_classification  = &id_classification

        if &empl-curr = 'Y' or &empl-fac = 'Y'
            let $home_dept = &dept
            do Get-Phone-Info
        end-if

    If (&stu-admit = 'Y') and (&stu-curr = 'Y')
            let $enrollment_status = 'Y'
        else
            let $enrollment_status = 'N'
    end-if
	
    let $output =
        $emplid || $comma ||
        $first_name || $comma ||
        $middle_name || $comma ||
        $last_name || $comma ||
        $Email || $comma ||
        $id_event_plan || $comma ||
        $id_event_plan_2 || $comma || !UU_MOD AX1145
        $id_classification || $comma ||
        $home_dept || $comma ||
        $work_phone  || $comma ||
		$enrollment_status
		
    #debuga show 'USAX1096-get-bio-info output' $output

    do Write-Data
    end-if
	
    let $first_name        = ' ' 
    let $middle_name       = ' '
    let $last_name         = ' '
    let $Email             = ' '
    let $id_event_plan     = ' '
    let $id_event_plan_2   = ' '!UU_MOD AX1145
    let $id_classification = ' '
    let $home_dept         = 'None'
    let $work_phone        = ' '
    let $enrollment_status = 'N'
    
FROM (
    SELECT
    CG.EMPLID
    FROM PS_UU_LDAP_CATG CG

    WHERE CG.UU_LDAP_EMPL_CURR ='Y'
OR CG.UU_LDAP_EMPL_FAC = 'Y'
OR CG.UU_LDAP_STU_CURR = 'Y'
OR CG.UU_LDAP_STU_ADMIT = 'Y'
    OR CG.UU_LDAP_POI = 'Y'

UNION

    SELECT EVP.EMPLID
    FROM PS_UU_EVENT_PLAN EVP
    WHERE EVP.EFFDT = (
        SELECT max(EVP_ED.EFFDT)
        FROM PS_UU_EVENT_PLAN EVP_ED
        WHERE EVP_ED.EMPLID = EVP.EMPLID
        and EVP_ED.EFFDT <= SYSDATE)
    AND UU_ID_EVENT_PLAN <> 'NONE'
    ) POP
left outer join PS_NAMES            A0 on POP.EMPLID = A0.EMPLID and A0.NAME_TYPE = 'PRI'
left outer join PS_NAMES            A1 on POP.EMPLID = A1.EMPLID and A1.NAME_TYPE = 'PRF'
left outer join PS_EMAIL_ADDRESSES  B0 on POP.EMPLID = B0.EMPLID and B0.E_ADDR_TYPE = 'UM'
left outer join PS_EMAIL_ADDRESSES  B1 on POP.EMPLID = B1.EMPLID and B1.E_ADDR_TYPE = 'UU'
left outer join PS_UU_EMPLOYMENT    C  on POP.EMPLID = C.EMPLID
left outer join PS_UU_LDAP_CATG     D  on POP.EMPLID = D.EMPLID
left outer join PS_UU_EVENT_PLAN    E  on POP.EMPLID = E.EMPLID
WHERE(
    A0.EFFDT = (
        select max(A0_ED.EFFDT)
        from PS_NAMES A0_ED
        where A0.EMPLID = A0_ED.EMPLID
        and A0.NAME_TYPE = A0_ED.NAME_TYPE
        and A0_ED.EFFDT <= SYSDATE) 
    OR A0.EFFDT is null)
AND (
    A1.EFFDT = (
        select max(A1_ED.EFFDT)
        from PS_NAMES a1_ED
        where A1.EMPLID = A1_ED.EMPLID
        and A1.NAME_TYPE = A1_ED.NAME_TYPE
        and A1_ED.EFFDT <= SYSDATE) 
    OR A1.EFFDT is null)
AND (
    E.EFFDT = (
        select max(E_ED.EFFDT)
        from PS_UU_EVENT_PLAN E_ED
        where E.EMPLID = E_ED.EMPLID
        and E.UU_ID_EVENT_PLAN = E_ED.UU_ID_EVENT_PLAN
        and E_ED.EFFDT <= SYSDATE) 
    OR E.EFFDT is null)

end-select

end-procedure get-bio-info


!*******************************************************************************
! Procedure: check-for-updates
! Description: Compares selected data to data in UU_EVENT_PLAN, then calls 
!              update-event-plan or insert-event-plan as needed.
!              UU_MOD AX1104
!*******************************************************************************
begin-procedure check-for-updates
#debuga show 'USAX1096-Check-For-Updates'
let $old_event_plan = ' '
let $old_class      = ' '
let $compEmplid     = ' '

begin-SELECT  
EV.EMPLID		      &compEmplid
EV.EFFDT		      &effdt
EV.UU_ID_EVENT_PLAN   &old_event_plan
EV.UU_ID_EVENT_PLAN_2 &old_event_plan_2 !UU_MOD AX1145
EV.UU_ID_CLASSIFICATN &old_class

    let $compEmplid       = &compEmplid
    let $effdt            = &effdt
    let $old_event_plan   = &old_event_plan
    let $old_event_plan_2 = &old_event_plan_2 !UU_MOD AX1145
    let $old_class        = &old_class

FROM PS_UU_EVENT_PLAN EV
WHERE EV.EMPLID = $emplid
AND (EV.EFFDT = (
    SELECT max(EV_ED.EFFDT)
    FROM PS_UU_EVENT_PLAN EV_ED
    WHERE EV_ED.EMPLID = EV.EMPLID
    and EV_ED.EFFDT <= sysdate)
    OR EV.EFFDT IS NULL
)
end-SELECT

#debuga show 'USAX1096-Check-For-Updates Compare: ' $old_event_plan ' | ' $id_event_plan
#debuga show 'USAX1096-Check-For-Updates Compare: ' $old_event_plan_2 ' | ' $id_event_plan_2
if ($old_event_plan = $id_event_plan) AND ($old_event_plan_2 = $id_event_plan_2) AND ($old_class = $id_classification) !UU_MOD AX1145
    !do nothing
else
    let $effdt = $current-date

    add 1 to #event_plan_count

    if $compEmplid = $emplid
        do update-event-plan
    else
        do insert-event-plan
    end-if
end-if
end-procedure check-for-updates


!*******************************************************************************
! Procedure: insert-event-plan
!            UU_MOD AX1104
!*******************************************************************************
begin-procedure insert-event-plan
#debuga show 'USAX1096-Insert-Event-Plan(' $emplid ', ' $id_event_plan ', ' $id_event_plan_2 ')'

begin-SQL 
INSERT INTO PS_UU_EVENT_PLAN
(
    EMPLID,
    EFFDT,
    UU_ID_EVENT_PLAN,
    UU_ID_EVENT_PLAN_2, !UU_MOD AX1145
    UU_ID_CLASSIFICATN
)
VALUES
(
    $Emplid,
    $Current-date,
    $id_event_plan,
    $id_event_plan_2, !UU_MOD AX1145
    $id_classification
)
end-SQL
end-procedure insert-event-plan


!*******************************************************************************
! Procedure: update-event-plan
!            UU_MOD AX1104
!*******************************************************************************
begin-procedure update-event-plan
#debuga show 'USAX1096-Update-Event-Plan(' $emplid ', ' $id_event_plan ', ' $id_event_plan_2 ')'

begin-SQL 
UPDATE PS_UU_EVENT_PLAN EP_U
SET	EP_U.EFFDT = $Current-date,
    EP_U.UU_ID_EVENT_PLAN = $id_event_plan,
    EP_U.UU_ID_EVENT_PLAN_2 = $id_event_plan_2, !UU_MOD AX1145
    EP_U.UU_ID_CLASSIFICATN = $id_classification
WHERE EP_U.EMPLID = $emplid
end-SQL

end-procedure update-event-plan


!*******************************************************************************
! Procedure: get-recent-inactive-bio-info
! Description: Selects bio info for emplids where event_plan has been set to 'NONE'
!              in the last 15 days
!              UU_MOD AX1104
!*******************************************************************************
begin-procedure get-recent-inactive-bio-info

    let $first_name        = ' ' 
    let $middle_name       = ' '
    let $last_name         = ' '
    let $Email             = ' '
    let $id_event_plan     = ' '
    let $id_event_plan_2   = ' '
    let $id_classification = ' '
    let $home_dept         = 'None'
    let $work_phone        = ' '
    let $enrollment_status = 'N'

begin-SELECT  
POP.EMPLID              &ep_emplid
POP.UU_ID_EVENT_PLAN    &ep_id_event_plan
POP.UU_ID_EVENT_PLAN_2  &ep_id_event_plan_2 !UU_MOD AX1145
POP.UU_ID_CLASSIFICATN  &ep_id_classification
A0.FIRST_NAME           &ep_first_name_PRI
A0.MIDDLE_NAME          &ep_middle_name_PRI
A0.LAST_NAME            &ep_last_name_PRI
A1.NAME_TYPE            &ep_PRF
A1.FIRST_NAME           &ep_first_name_PRF
A1.MIDDLE_NAME          &ep_middle_name_PRF
A1.LAST_NAME            &ep_last_name_PRF
B0.EMAIL_ADDR           &ep_email_UM
B1.E_ADDR_TYPE          &ep_UU
B1.EMAIL_ADDR           &ep_email_UU
C.UU_HOME_DEPT          &ep_dept
D.UU_LDAP_STU_ADMIT     &ep_stu-admit
D.UU_LDAP_STU_CURR      &ep_stu-curr
D.UU_LDAP_EMPL_CURR     &ep_empl-curr
D.UU_LDAP_EMPL_FAC      &ep_empl-fac

POP.EFFDT &ep_effdt-debug

    let $emplid = &ep_emplid
    #debuga show ' '
    #debuga show 'USAX1096-get-recent-inactive-bio-info(' $emplid ')'

    if(&ep_PRF = 'PRF')
        let $first_name  = &ep_first_name_PRF
        let $middle_name = &ep_middle_name_PRF
        let $last_name   = &ep_last_name_PRF
    else
        let $first_name  = &ep_first_name_PRI
        let $middle_name = &ep_middle_name_PRI
        let $last_name   = &ep_last_name_PRI
    end-if

    if(&ep_UU = 'UU')
        let $email = &ep_email_UU
    else
        let $email = &ep_email_UM
    end-if

    let $id_event_plan      = &ep_id_event_plan
    let $id_event_plan_2    = &ep_id_event_plan_2 !UU_MOD AX1145
    let $id_classification  = &ep_id_classification

    if &ep_empl-curr = 'Y' or &ep_empl-fac = 'Y'
        let $home_dept          = &ep_dept
        do Get-Phone-Info
    end-if

    If (&ep_stu-admit = 'Y') and (&ep_stu-curr = 'Y')
        let $enrollment_status = 'Y'
    else
        let $enrollment_status = 'N'
    end-if

    let $output =
    $emplid || $comma ||
    $first_name || $comma ||
    $middle_name || $comma ||
    $last_name || $comma ||
    $Email || $comma ||
    $id_event_plan || $comma ||
    $id_event_plan_2 || $comma ||
    $id_classification || $comma ||
    $home_dept || $comma ||
    $work_phone  || $comma ||
    $enrollment_status

    #debuga show 'USAX1096-get-recent-inactive-bio-info output ' $output
    do write-data
    
    let $first_name        = ' ' 
    let $middle_name       = ' '
    let $last_name         = ' '
    let $Email             = ' '
    let $id_event_plan     = ' '
    let $id_classification = ' '
    let $home_dept         = 'None'
    let $work_phone        = ' '
    let $enrollment_status = 'N'

FROM PS_UU_EVENT_PLAN POP
            
left outer join PS_NAMES            A0 on POP.EMPLID = A0.EMPLID and A0.NAME_TYPE = 'PRI'
left outer join PS_NAMES            A1 on POP.EMPLID = A1.EMPLID and A1.NAME_TYPE = 'PRF'
left outer join PS_EMAIL_ADDRESSES  B0 on POP.EMPLID = B0.EMPLID and B0.E_ADDR_TYPE = 'UM'
left outer join PS_EMAIL_ADDRESSES  B1 on POP.EMPLID = B1.EMPLID and B1.E_ADDR_TYPE = 'UU'
left outer join PS_UU_EMPLOYMENT    C  on POP.EMPLID = C.EMPLID
left outer join PS_UU_LDAP_CATG     D  on POP.EMPLID = D.EMPLID

WHERE POP.UU_ID_EVENT_PLAN = 'NONE'
AND (SYSDATE - POP.EFFDT) <= 15
AND (
    POP.EFFDT = (
        select max(POP_ED.EFFDT)
        from PS_UU_EVENT_PLAN POP_ED
        where POP.EMPLID = POP_ED.EMPLID
        and POP_ED.EFFDT <= SYSDATE) 
    OR POP.EFFDT is null)  
AND (
    A0.EFFDT = (
        select max(A0_ED.EFFDT)
        from PS_NAMES A0_ED
        where A0.EMPLID = A0_ED.EMPLID
        and A0.NAME_TYPE = A0_ED.NAME_TYPE
        and A0_ED.EFFDT <= SYSDATE) 
    OR A0.EFFDT is null)
AND (
    A1.EFFDT = (
        select max(A1_ED.EFFDT)
        from PS_NAMES a1_ED
        where A1.EMPLID = A1_ED.EMPLID
        and A1.NAME_TYPE = A1_ED.NAME_TYPE
        and A1_ED.EFFDT <= SYSDATE) 
    OR A1.EFFDT is null)
end-SELECT


end-procedure get-recent-inactive-bio-info


!*******************************************************************************
begin-procedure Get-Phone-Info
!*******************************************************************************
! Description: What it says on the tin
! UU_MOD AX1104
!*******************************************************************************
#debuga show 'USAX1096-get-phone-info'

    Let $Deptid = 'None'

begin-SELECT   !Work phone
PHONE.POSITION_PHONE		&pos_phone

    Do get-staff-status($emplid, $is_staff, $staff_status)
    Do get-faculty-status($emplid, $is_faculty, $faculty_status)

    if $is_staff = 'Y' or $is_faculty = 'Y'
        Let #PhoneLength = Length(&pos_phone)
        if #PhoneLength = 1
            Do get-department-phone
        else
            Let $work_phone = &pos_phone
        end-if
    end-if

FROM PS_PER_ORG_ASGN_VW	PHONE
WHERE PHONE.EMPLID = $emplid
end-SELECT !Work phone

end-procedure Get-Phone-Info


!*******************************************************************************
! Procedure: Get-Department-Phone
! Description: This process retrieves the department phone for those employees who
!              do not have an individual phone
!               AX1104
!*******************************************************************************
begin-procedure Get-Department-Phone
#debuga show 'USAX-1096-get-department-phone'

    let $Deptid = 'None'
    
begin-SELECT   !Dept id
EMP.UU_HOME_DEPT		&Deptid

    if &Deptid = '' OR &Deptid = ' '
        Let $Deptid = 'None'
    else
        Let $Deptid = &Deptid
    end-if

FROM PS_UU_EMPLOYMENT	EMP
WHERE EMP.EMPLID = $emplid
end-SELECT !Dept id

!show 'USAX-1096-get-department-phone deptid = ' $Deptid
begin-SELECT   !Dept phone
DEPT.UU_DEPT_PHONE		&Dept_phone

    let #PhoneLength = Length(&Dept_phone)
    if #PhoneLength = 1
    else  
        let $work_phone = &Dept_phone  
    end-if 

FROM PS_DEPT_TBL	DEPT
WHERE DEPT.SETID = 'COMMN'
AND DEPT.DEPTID = $Deptid
AND DEPT.EFFDT = (SELECT MAX(DEPT_ED.EFFDT) FROM PS_DEPT_TBL DEPT_ED
                    WHERE DEPT_ED.SETID = DEPT.SETID
                    AND DEPT_ED.DEPTID = DEPT.DEPTID
                    AND DEPT_ED.EFFDT <= SYSDATE)
ORDER BY DEPT.DEPTID 
end-SELECT !Dept phone

end-procedure Get-Department-Phone


!*******************************************************************************
! Check_enrollment_status
!*******************************************************************************
begin-procedure check_enrollment_status($emplid, :$enrollment_status)

let $enrollment_status = 'N'

Begin-Select 
E.EMPLID

    let $enrollment_status = 'Y'

From PS_STDNT_ENRL E
WHERE E.EMPLID = $emplid
AND E.STDNT_ENRL_STATUS = 'E'
AND E.STRM = (Select 
                STRM 
                From PS_TERM_TBL T
                WHERE T.TERM_BEGIN_DT <= SYSDATE
                AND T.TERM_END_DT >= SYSDATE
                AND T.ACAD_CAREER = E.ACAD_CAREER)
End-select

end-procedure


!*******************************************************************************
begin-procedure get-event-plan-2
!*******************************************************************************
! Descr: sets $id_event_plan_2 for current $emplid
! Inputs: PS_BEN_PROG_PARTIC
!         PS_UU_BN_ELG_XWALK
! UU_MOD AX1145
!*******************************************************************************
begin-select

BP.EMPLID,
X.UU_BEN_GRP,
BP.BENEFIT_PROGRAM

    if &X.UU_BEN_GRP = 'UNV'
        let $id_event_plan_2 = 'C'
    end-if
    
    if &X.UU_BEN_GRP = 'UHC'
        let $id_event_plan_2 = 'H'
    end-if

FROM PS_BEN_PROG_PARTIC BP, PS_UU_BN_ELG_XWALK X
WHERE BP.EMPLID = $emplid
AND BP.EFFDT = (Select MAX(BP_EFF.EFFDT) FROM PS_BEN_PROG_PARTIC BP_EFF
                WHERE BP_EFF.EMPLID = BP.EMPLID
                AND BP_EFF.EMPL_RCD = BP.EMPL_RCD
                AND BP_EFF.COBRA_EVENT_ID = BP.COBRA_EVENT_ID
                AND BP_EFF.EFFDT <= SYSDATE)
AND X.BENEFIT_PROGRAM = BP.BENEFIT_PROGRAM
AND X.EFFDT = (SELECT MAX(X_ED.EFFDT) FROM PS_UU_BN_ELG_XWALK X_ED
                WHERE X.UU_BEN_GRP = X_ED.UU_BEN_GRP
                AND X_ED.EFFDT <= SYSDATE)
AND X.UU_BEN_GRP IN ('UNV', 'UHC')

end-select

end-procedure get-event-plan-2


!*************************************************************************
! WRITE DATA
!*************************************************************************
begin-procedure Write-Data
    #debuga show 'Entering Procedure Write-Data'

    do AUX-CSV-SET-STRING($emplid, $recstring)
    do AUX-CSV-ADD-STRING($first_name, $recstring)
    do AUX-CSV-ADD-STRING($middle_name, $recstring)
    do AUX-CSV-ADD-STRING($last_name, $recstring)
    do AUX-CSV-ADD-STRING($Email, $recstring)
    do AUX-CSV-ADD-STRING($id_event_plan, $recstring)
    do AUX-CSV-ADD-STRING($id_event_plan_2, $recstring)!UU_MOD AX1145
    do AUX-CSV-ADD-STRING($id_classification, $recstring)
    do AUX-CSV-ADD-STRING($home_dept, $recstring)
    do AUX-CSV-ADD-STRING($work_phone, $recstring)
	do AUX-CSV-ADD-STRING($enrollment_status, $recstring)
	
    add 1 to #count

    write 111 from $recstring

end-procedure Write-Data


!******************************************************************************
! Writes the file's header line.					      *    					  
!******************************************************************************
Begin-procedure Write-File-Header

    do AUX-CSV-SET-STRING('EMPLID', $recstring)
    do AUX-CSV-ADD-STRING('FIRST NAME', $recstring)
    do AUX-CSV-ADD-STRING('MIDDLE NAME', $recstring)
    do AUX-CSV-ADD-STRING('LAST NAME', $recstring)
    do AUX-CSV-ADD-STRING('EMAIL', $recstring)
    do AUX-CSV-ADD-STRING('EVENT PLAN ID', $recstring)
    do AUX-CSV-ADD-STRING('EVENT PLAN ID 2', $recstring) !UU_MOD AX1145
    do AUX-CSV-ADD-STRING('CLASSIFICATION ID', $recstring)
    do AUX-CSV-ADD-STRING('HOME DEPT', $recstring)
    do AUX-CSV-ADD-STRING('WORK PHONE', $recstring)
    do AUX-CSV-ADD-STRING('ENROLLMENT STATUS', $recstring)

    write 111 from $recstring

!   let $header =
!       'EMPLID' || $comma ||
!       'FIRST NAME' || $comma ||
!       'MIDDLE NAME' || $comma ||
!       'LAST NAME' || $comma ||
!       'EMAIL' || $comma ||
!       'EVENT PLAN ID' || $comma ||
!       'EVENT PLAN ID 2' || $comma ||
!       'CLASSIFICATION ID'  || $comma ||
!        'HOME DEPT' || $comma ||
!       'WORK PHONE'  || $comma ||
!       'ENROLLMENT STATUS'
 

!       write 111 from $header

!       show 'File Header = ' $header

End-Procedure Write-File-Header


!*********************************************************************
! Procedure: get-file-date-time                                      *
! Descr: Getting date and time to be used as part of the filename.   *
!*********************************************************************
Begin-Procedure get-file-date-time(:$today)

show ' '
show 'Getting filename date and time'
show ' '

Begin-SELECT
TO_CHAR(SYSDATE, 'YYYY_MM_DD') &SYSDATE

	let $today = &SYSDATE

From DUAL
END-SELECT

   show 'Date Today: ' $today

End-Procedure


!***************************************************************************************
! Procedure: Archive-File                                                              *
!     Descr: Archive process file                                                      *
!***************************************************************************************

BEGIN-PROCEDURE Archive-File($LocalFileName, $ArchiveFileName)

If $File_Path <> ' '

   let $command =  'cp ' || $LocalFileName || ' ' || $ArchiveFileName
   show 'command: '  $command
   show ' '  
   CALL SYSTEM USING $command #call_stat
   if #call_stat >  0
      show 'Error executing UNIX command: '  $command ' ' #call_stat
   end-if
   
end-if

END-PROCEDURE Archive-File


!*************************************************************************
! INCLUDE STATEMENTS
!*************************************************************************
#Include 'curdttim.sqc'         !Get-Current-DateTime procedure
#Include 'datetime.sqc'         !Routines for date and time formatting
#Include 'datemath.sqc'         !Routines for date and time math
#Include 'number.sqc'           !Routines to format numbers
#Include 'stdapi.sqc'           !Routines to Update Run Status
#Include 'reset.sqc'            !Routines to Reset Printer procedure
#Include 'ushr_setenv.sqc'      !New Sqc for Setting Paths etc...
#Include 'usax_common.sqc'      !New Sqc for common Auxiliary routines
#Include 'hr-misc.sqc'          
#Include 'aux-misc.sqc'